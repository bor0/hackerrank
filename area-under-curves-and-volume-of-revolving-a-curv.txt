1 #lang racket
2 (require racket/format)
3
4 (define (f coef deg x)
5     (if (eq? coef '()) 0 (+ (* (car coef) (expt x (car deg)))
6                                  (f (cdr coef) (cdr deg) x))))
7
8 (define (circle-area x)
9     (* pi (sqr x)))
10
11 (define (integrate-iter f lb ub steps i acc)
12      (define dx (/ (- ub lb) steps))
13      (if (> i steps)
14           (* dx acc)
15           (integrate-iter
16            f lb ub steps (+ i 1)
17            (+ acc
18                (f (+ lb (* dx i)))))))
19
20 (define (integrate f lb ub)
21      (integrate-iter f lb ub 10000.0 0 0))
22
23 (define (area f lb ub)
24      (integrate f lb ub))
25
26 (define (volume f lb ub)
27      (integrate (lambda (x) (circle-area (f x))) lb ub))
28
29 (define (main coef deg lb ub)
30      (displayln (~r (integrate (lambda (x) (f coef deg x)) lb ub) #:precision '(= 1)))
31      (displayln (~r (volume (lambda (x) (f coef deg x)) lb ub) #:precision '(= 1))))
32
33 (define coef (map string->number (string-split (read-line) " ")))
34 (define deg (map string->number (string-split (read-line) " ")))
35 (define lb (read))
36 (define ub (read))
37
38 (main coef deg lb ub)
