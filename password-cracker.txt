1▾#include <cmath>
2 #include <cstdio>
3 #include <vector>
4 #include <iostream>
5 #include <algorithm>
6 using namespace std;
7
8▾std::string ReplaceAll(std::string str, const std::string& from, const std::string& to) {
9              size_t start_pos = 0;
10
11▾             while((start_pos = str.find(from, start_pos)) != std::string::npos) {
12                         str.replace(start_pos, from.length(), to);
13                         start_pos += to.length(); // Handles case where 'to' is a substring of 'from'
14         }
15
16              return str;
17 }
18
19▾string check_validity(vector<string> passwords, string password) {
20▾             for (int j = 0; j < pow(2, passwords.size()); j++) {
21                         string tmp = password;
22                         string actualpass = password;
23
24▾                        for (int i = 0; i < passwords.size(); i++) {
25▾                                  if (j & (1 << i)) {
26                                              tmp = ReplaceAll(tmp, passwords[i], "");
27                                              actualpass = ReplaceAll(actualpass, passwords[i], " " + passwords[i]);
28                         }
29                 }
30                         if ("" == tmp) return actualpass.substr(1);
31         }
32
33              return "WRONG PASSWORD";
34 }
35
36▾int main() {
37              int n, k;
38              cin >> n;
39
40▾             for (int i = 0; i < n; i++) {
41                         vector<string> passwords;
42                         string password;
43
44                         cin >> k;
45▾                        while (k) {
46                                   cin >> password;
47                                   passwords.push_back(password);
48                                   k--;
49                 }
50
51                         cin >> password;
52                         cout << check_validity(passwords, password) << endl;
53         }
54
55              return 0;
56 }
